{"version":3,"sources":["components/score/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","className","type","score","Cards","onClick","clickedImage","id","src","image","alt","scramble","array","i","length","pic","Math","floor","random","console","log","App","state","Pic","clickedPic","indexOf","push","handleIncrement","doSort","setState","this","map","Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gsFAoBeA,MAjBf,SAAoBC,GAClB,OACE,gCACE,yBAAKC,UAAU,OACb,4BAAQC,KAAK,SAASD,UAAU,uBAAhC,cACa,0BAAMA,UAAU,qBAAqBD,EAAMG,SAG1D,yBAAKF,UAAU,OACb,yBAAKA,UAAU,OACb,mFCHKG,G,MAPD,SAAAJ,GAAK,OACjB,yBAAKC,UAAU,OACfI,QAAS,kBAAML,EAAMM,aAAaN,EAAMO,MACpC,yBAAKC,IAAKR,EAAMS,MAAOC,IAAI,Q,OCAjC,SAASC,EAASC,GAChB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAEzC,IAAME,EAAKC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAFF,EAIhB,CAACD,EAAMG,GAAMH,EAAMC,IAA3CD,EAAMC,GAJkC,KAI9BD,EAAMG,GAJwB,KAO3C,OADAI,QAAQC,IAAIR,GACLA,E,IAwEMS,E,2MApEbC,MAAQ,CACNC,MACApB,MAAO,EACPqB,WAAY,I,EAGdlB,aAAe,SAAAC,GAEb,IAAIiB,EAAa,EAAKF,MAAME,WAChB,EAAKF,MAAMnB,OAGS,IAA5BqB,EAAWC,QAAQlB,IAErBiB,EAAWE,KAAKnB,GAChBY,QAAQC,IAAII,GAEZ,EAAKG,kBAEL,EAAKC,UAGL,EAAKC,SAAS,CACZ1B,MAAO,EACPqB,WAAY,M,EAYlBG,gBAAkB,WAChB,EAAKE,SAAS,CAAE1B,MAAO,EAAKmB,MAAMnB,MAAQ,K,EAI5CyB,OAAS,WACP,EAAKC,SAAS,CAAEN,IAAKZ,EAASY,M,wEAKtB,IAAD,OACP,OACE,yBAAKtB,UAAU,aAEb,kBAAC,EAAD,CACEE,MAAO2B,KAAKR,MAAMnB,QACpB,yBAAKF,UAAU,OACZ6B,KAAKR,MAAMC,IAAIQ,KAAI,SAAAR,GAAG,OACrB,kBAACS,EAAD,CAEEzB,GAAIgB,EAAIhB,GACRE,MAAOc,EAAId,MACXH,aAAc,EAAKA,wB,GA5Df2B,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.101da5ca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Scoreboard(props) {\r\n  return (\r\n    <header>\r\n      <div className=\"row\">\r\n        <button type=\"button\" className=\"col btn btn-primary\">\r\n          Your Score <span className=\"badge badge-light\">{props.score}</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h6>A Memory Game! Don't click on a character twice</h6>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Cards = props => (\r\n  <div className=\"card\"\r\n  onClick={() => props.clickedImage(props.id)}>\r\n      <img src={props.image} alt=\"\"/>\r\n  </div>\r\n);\r\n\r\nexport default Cards;\r\n","import React, { Component } from \"react\";\nimport Scoreboard from \"./components/score\";\nimport Card from \"./components/Card\";\nimport Pic from \"./cards.json\";\n\n// each click scrables the pics\nfunction scramble(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n\n    const pic= Math.floor(Math.random() * (i + 1));\n\n    [array[i], array[pic]] = [array[pic], array[i]];\n  }\n  console.log(array);\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    Pic,\n    score: 0,\n    clickedPic: []\n  };\n\n  clickedImage = id => {\n    // set state of array to be updated with clicks\n    let clickedPic = this.state.clickedPic;\n    let score = this.state.score;\n\n    \n    if (clickedPic.indexOf(id) === -1) {\n      // put id into array\n      clickedPic.push(id);\n      console.log(clickedPic);\n       //score function\n      this.handleIncrement();\n      //for each click - scrable\n      this.doSort();\n    } else if (score === 12) {\n// if player reaches score of 12\n      this.setState({\n        score: 0,\n        clickedPic: []\n      });\n    } else {\n    // player is a loser\n      this.setState({\n        score: 0,\n        clickedPic: []\n      });\n    }\n  };\n\n// score ups per correct click\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // re sort the pics\n  doSort = () => {\n    this.setState({ Pic: scramble(Pic) });\n  };\n\n\n\n  render() {\n    return (\n      <div className=\"container\">\n      \n        <Scoreboard\n          score={this.state.score}/>\n        <div className=\"row\">\n          {this.state.Pic.map(Pic => (\n            <Card\n              // key={Pic.id}\n              id={Pic.id}\n              image={Pic.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}